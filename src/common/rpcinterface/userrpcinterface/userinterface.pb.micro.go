// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userinterface.proto

package userrpcinterface

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	UserRegister(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*ReigisterResp, error)
	QueryUserInfo(ctx context.Context, in *QueryUserInfoReq, opts ...client.CallOption) (*QueryUserInfoResp, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...client.CallOption) (*UpdateUserProfileResp, error)
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...client.CallOption) (*ChangeUserPasswordResp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) UserRegister(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*ReigisterResp, error) {
	req := c.c.NewRequest(c.name, "UserService.UserRegister", in)
	out := new(ReigisterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) QueryUserInfo(ctx context.Context, in *QueryUserInfoReq, opts ...client.CallOption) (*QueryUserInfoResp, error) {
	req := c.c.NewRequest(c.name, "UserService.QueryUserInfo", in)
	out := new(QueryUserInfoResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, opts ...client.CallOption) (*UpdateUserProfileResp, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateUserProfile", in)
	out := new(UpdateUserProfileResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, opts ...client.CallOption) (*ChangeUserPasswordResp, error) {
	req := c.c.NewRequest(c.name, "UserService.ChangeUserPassword", in)
	out := new(ChangeUserPasswordResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	UserRegister(context.Context, *RegisterReq, *ReigisterResp) error
	QueryUserInfo(context.Context, *QueryUserInfoReq, *QueryUserInfoResp) error
	UpdateUserProfile(context.Context, *UpdateUserProfileReq, *UpdateUserProfileResp) error
	ChangeUserPassword(context.Context, *ChangeUserPasswordReq, *ChangeUserPasswordResp) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		UserRegister(ctx context.Context, in *RegisterReq, out *ReigisterResp) error
		QueryUserInfo(ctx context.Context, in *QueryUserInfoReq, out *QueryUserInfoResp) error
		UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, out *UpdateUserProfileResp) error
		ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, out *ChangeUserPasswordResp) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) UserRegister(ctx context.Context, in *RegisterReq, out *ReigisterResp) error {
	return h.UserServiceHandler.UserRegister(ctx, in, out)
}

func (h *userServiceHandler) QueryUserInfo(ctx context.Context, in *QueryUserInfoReq, out *QueryUserInfoResp) error {
	return h.UserServiceHandler.QueryUserInfo(ctx, in, out)
}

func (h *userServiceHandler) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileReq, out *UpdateUserProfileResp) error {
	return h.UserServiceHandler.UpdateUserProfile(ctx, in, out)
}

func (h *userServiceHandler) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordReq, out *ChangeUserPasswordResp) error {
	return h.UserServiceHandler.ChangeUserPassword(ctx, in, out)
}
